// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use bitflags::bitflags;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

bitflags! {
    pub struct Cache: u32 {
        const NONE = 0;
        const PARENT = 1;
        const CHILDREN = 2;
        const NAME = 4;
        const DESCRIPTION = 8;
        const STATES = 16;
        const ROLE = 32;
        const INTERFACES = 64;
        const ATTRIBUTES = 128;
        const ALL = 1073741823;
        const DEFAULT = 127;
        const UNDEFINED = 1073741824;
    }
}

impl fmt::Display for Cache {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl ToGlib for Cache {
    type GlibType = ffi::AtspiCache;

    fn to_glib(&self) -> ffi::AtspiCache {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiCache> for Cache {
    unsafe fn from_glib(value: ffi::AtspiCache) -> Cache {
        skip_assert_initialized!();
        Cache::from_bits_truncate(value)
    }
}

impl StaticType for Cache {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_cache_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Cache {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Cache {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for Cache {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct KeyListenerSyncType: u32 {
        const NOSYNC = 0;
        const SYNCHRONOUS = 1;
        const CANCONSUME = 2;
        const ALL_WINDOWS = 4;
    }
}

impl fmt::Display for KeyListenerSyncType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl ToGlib for KeyListenerSyncType {
    type GlibType = ffi::AtspiKeyListenerSyncType;

    fn to_glib(&self) -> ffi::AtspiKeyListenerSyncType {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiKeyListenerSyncType> for KeyListenerSyncType {
    unsafe fn from_glib(value: ffi::AtspiKeyListenerSyncType) -> KeyListenerSyncType {
        skip_assert_initialized!();
        KeyListenerSyncType::from_bits_truncate(value)
    }
}

impl StaticType for KeyListenerSyncType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_key_listener_sync_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for KeyListenerSyncType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for KeyListenerSyncType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for KeyListenerSyncType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

