// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiCollectionMatchType")]
pub enum CollectionMatchType {
    #[doc(alias = "ATSPI_Collection_MATCH_INVALID")]
    Invalid,
    #[doc(alias = "ATSPI_Collection_MATCH_ALL")]
    All,
    #[doc(alias = "ATSPI_Collection_MATCH_ANY")]
    Any,
    #[doc(alias = "ATSPI_Collection_MATCH_NONE")]
    None,
    #[doc(alias = "ATSPI_Collection_MATCH_EMPTY")]
    Empty,
    #[doc(alias = "ATSPI_Collection_MATCH_LAST_DEFINED")]
    LastDefined,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CollectionMatchType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CollectionMatchType::{}", match *self {
            CollectionMatchType::Invalid => "Invalid",
            CollectionMatchType::All => "All",
            CollectionMatchType::Any => "Any",
            CollectionMatchType::None => "None",
            CollectionMatchType::Empty => "Empty",
            CollectionMatchType::LastDefined => "LastDefined",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for CollectionMatchType {
    type GlibType = ffi::AtspiCollectionMatchType;

    fn to_glib(&self) -> ffi::AtspiCollectionMatchType {
        match *self {
            CollectionMatchType::Invalid => ffi::ATSPI_Collection_MATCH_INVALID,
            CollectionMatchType::All => ffi::ATSPI_Collection_MATCH_ALL,
            CollectionMatchType::Any => ffi::ATSPI_Collection_MATCH_ANY,
            CollectionMatchType::None => ffi::ATSPI_Collection_MATCH_NONE,
            CollectionMatchType::Empty => ffi::ATSPI_Collection_MATCH_EMPTY,
            CollectionMatchType::LastDefined => ffi::ATSPI_Collection_MATCH_LAST_DEFINED,
            CollectionMatchType::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiCollectionMatchType> for CollectionMatchType {
    unsafe fn from_glib(value: ffi::AtspiCollectionMatchType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => CollectionMatchType::Invalid,
            1 => CollectionMatchType::All,
            2 => CollectionMatchType::Any,
            3 => CollectionMatchType::None,
            4 => CollectionMatchType::Empty,
            5 => CollectionMatchType::LastDefined,
            value => CollectionMatchType::__Unknown(value),
}
    }
}

impl StaticType for CollectionMatchType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_collection_match_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for CollectionMatchType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for CollectionMatchType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for CollectionMatchType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiCollectionSortOrder")]
pub enum CollectionSortOrder {
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_INVALID")]
    Invalid,
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_CANONICAL")]
    Canonical,
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_FLOW")]
    Flow,
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_TAB")]
    Tab,
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_REVERSE_CANONICAL")]
    ReverseCanonical,
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_REVERSE_FLOW")]
    ReverseFlow,
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_REVERSE_TAB")]
    ReverseTab,
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_LAST_DEFINED")]
    LastDefined,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CollectionSortOrder {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CollectionSortOrder::{}", match *self {
            CollectionSortOrder::Invalid => "Invalid",
            CollectionSortOrder::Canonical => "Canonical",
            CollectionSortOrder::Flow => "Flow",
            CollectionSortOrder::Tab => "Tab",
            CollectionSortOrder::ReverseCanonical => "ReverseCanonical",
            CollectionSortOrder::ReverseFlow => "ReverseFlow",
            CollectionSortOrder::ReverseTab => "ReverseTab",
            CollectionSortOrder::LastDefined => "LastDefined",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for CollectionSortOrder {
    type GlibType = ffi::AtspiCollectionSortOrder;

    fn to_glib(&self) -> ffi::AtspiCollectionSortOrder {
        match *self {
            CollectionSortOrder::Invalid => ffi::ATSPI_Collection_SORT_ORDER_INVALID,
            CollectionSortOrder::Canonical => ffi::ATSPI_Collection_SORT_ORDER_CANONICAL,
            CollectionSortOrder::Flow => ffi::ATSPI_Collection_SORT_ORDER_FLOW,
            CollectionSortOrder::Tab => ffi::ATSPI_Collection_SORT_ORDER_TAB,
            CollectionSortOrder::ReverseCanonical => ffi::ATSPI_Collection_SORT_ORDER_REVERSE_CANONICAL,
            CollectionSortOrder::ReverseFlow => ffi::ATSPI_Collection_SORT_ORDER_REVERSE_FLOW,
            CollectionSortOrder::ReverseTab => ffi::ATSPI_Collection_SORT_ORDER_REVERSE_TAB,
            CollectionSortOrder::LastDefined => ffi::ATSPI_Collection_SORT_ORDER_LAST_DEFINED,
            CollectionSortOrder::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiCollectionSortOrder> for CollectionSortOrder {
    unsafe fn from_glib(value: ffi::AtspiCollectionSortOrder) -> Self {
        skip_assert_initialized!();
        match value {
            0 => CollectionSortOrder::Invalid,
            1 => CollectionSortOrder::Canonical,
            2 => CollectionSortOrder::Flow,
            3 => CollectionSortOrder::Tab,
            4 => CollectionSortOrder::ReverseCanonical,
            5 => CollectionSortOrder::ReverseFlow,
            6 => CollectionSortOrder::ReverseTab,
            7 => CollectionSortOrder::LastDefined,
            value => CollectionSortOrder::__Unknown(value),
}
    }
}

impl StaticType for CollectionSortOrder {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_collection_sort_order_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for CollectionSortOrder {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for CollectionSortOrder {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for CollectionSortOrder {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiCollectionTreeTraversalType")]
pub enum CollectionTreeTraversalType {
    #[doc(alias = "ATSPI_Collection_TREE_RESTRICT_CHILDREN")]
    RestrictChildren,
    #[doc(alias = "ATSPI_Collection_TREE_RESTRICT_SIBLING")]
    RestrictSibling,
    #[doc(alias = "ATSPI_Collection_TREE_INORDER")]
    Inorder,
    #[doc(alias = "ATSPI_Collection_TREE_LAST_DEFINED")]
    LastDefined,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CollectionTreeTraversalType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CollectionTreeTraversalType::{}", match *self {
            CollectionTreeTraversalType::RestrictChildren => "RestrictChildren",
            CollectionTreeTraversalType::RestrictSibling => "RestrictSibling",
            CollectionTreeTraversalType::Inorder => "Inorder",
            CollectionTreeTraversalType::LastDefined => "LastDefined",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for CollectionTreeTraversalType {
    type GlibType = ffi::AtspiCollectionTreeTraversalType;

    fn to_glib(&self) -> ffi::AtspiCollectionTreeTraversalType {
        match *self {
            CollectionTreeTraversalType::RestrictChildren => ffi::ATSPI_Collection_TREE_RESTRICT_CHILDREN,
            CollectionTreeTraversalType::RestrictSibling => ffi::ATSPI_Collection_TREE_RESTRICT_SIBLING,
            CollectionTreeTraversalType::Inorder => ffi::ATSPI_Collection_TREE_INORDER,
            CollectionTreeTraversalType::LastDefined => ffi::ATSPI_Collection_TREE_LAST_DEFINED,
            CollectionTreeTraversalType::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiCollectionTreeTraversalType> for CollectionTreeTraversalType {
    unsafe fn from_glib(value: ffi::AtspiCollectionTreeTraversalType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => CollectionTreeTraversalType::RestrictChildren,
            1 => CollectionTreeTraversalType::RestrictSibling,
            2 => CollectionTreeTraversalType::Inorder,
            3 => CollectionTreeTraversalType::LastDefined,
            value => CollectionTreeTraversalType::__Unknown(value),
}
    }
}

impl StaticType for CollectionTreeTraversalType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_collection_tree_traversal_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for CollectionTreeTraversalType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for CollectionTreeTraversalType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for CollectionTreeTraversalType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiComponentLayer")]
pub enum ComponentLayer {
    #[doc(alias = "ATSPI_LAYER_INVALID")]
    Invalid,
    #[doc(alias = "ATSPI_LAYER_BACKGROUND")]
    Background,
    #[doc(alias = "ATSPI_LAYER_CANVAS")]
    Canvas,
    #[doc(alias = "ATSPI_LAYER_WIDGET")]
    Widget,
    #[doc(alias = "ATSPI_LAYER_MDI")]
    Mdi,
    #[doc(alias = "ATSPI_LAYER_POPUP")]
    Popup,
    #[doc(alias = "ATSPI_LAYER_OVERLAY")]
    Overlay,
    #[doc(alias = "ATSPI_LAYER_WINDOW")]
    Window,
    #[doc(alias = "ATSPI_LAYER_LAST_DEFINED")]
    LastDefined,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ComponentLayer {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ComponentLayer::{}", match *self {
            ComponentLayer::Invalid => "Invalid",
            ComponentLayer::Background => "Background",
            ComponentLayer::Canvas => "Canvas",
            ComponentLayer::Widget => "Widget",
            ComponentLayer::Mdi => "Mdi",
            ComponentLayer::Popup => "Popup",
            ComponentLayer::Overlay => "Overlay",
            ComponentLayer::Window => "Window",
            ComponentLayer::LastDefined => "LastDefined",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for ComponentLayer {
    type GlibType = ffi::AtspiComponentLayer;

    fn to_glib(&self) -> ffi::AtspiComponentLayer {
        match *self {
            ComponentLayer::Invalid => ffi::ATSPI_LAYER_INVALID,
            ComponentLayer::Background => ffi::ATSPI_LAYER_BACKGROUND,
            ComponentLayer::Canvas => ffi::ATSPI_LAYER_CANVAS,
            ComponentLayer::Widget => ffi::ATSPI_LAYER_WIDGET,
            ComponentLayer::Mdi => ffi::ATSPI_LAYER_MDI,
            ComponentLayer::Popup => ffi::ATSPI_LAYER_POPUP,
            ComponentLayer::Overlay => ffi::ATSPI_LAYER_OVERLAY,
            ComponentLayer::Window => ffi::ATSPI_LAYER_WINDOW,
            ComponentLayer::LastDefined => ffi::ATSPI_LAYER_LAST_DEFINED,
            ComponentLayer::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiComponentLayer> for ComponentLayer {
    unsafe fn from_glib(value: ffi::AtspiComponentLayer) -> Self {
        skip_assert_initialized!();
        match value {
            0 => ComponentLayer::Invalid,
            1 => ComponentLayer::Background,
            2 => ComponentLayer::Canvas,
            3 => ComponentLayer::Widget,
            4 => ComponentLayer::Mdi,
            5 => ComponentLayer::Popup,
            6 => ComponentLayer::Overlay,
            7 => ComponentLayer::Window,
            8 => ComponentLayer::LastDefined,
            value => ComponentLayer::__Unknown(value),
}
    }
}

impl StaticType for ComponentLayer {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_component_layer_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ComponentLayer {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ComponentLayer {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for ComponentLayer {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiCoordType")]
pub enum CoordType {
    #[doc(alias = "ATSPI_COORD_TYPE_SCREEN")]
    Screen,
    #[doc(alias = "ATSPI_COORD_TYPE_WINDOW")]
    Window,
    #[doc(alias = "ATSPI_COORD_TYPE_PARENT")]
    Parent,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CoordType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CoordType::{}", match *self {
            CoordType::Screen => "Screen",
            CoordType::Window => "Window",
            CoordType::Parent => "Parent",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for CoordType {
    type GlibType = ffi::AtspiCoordType;

    fn to_glib(&self) -> ffi::AtspiCoordType {
        match *self {
            CoordType::Screen => ffi::ATSPI_COORD_TYPE_SCREEN,
            CoordType::Window => ffi::ATSPI_COORD_TYPE_WINDOW,
            CoordType::Parent => ffi::ATSPI_COORD_TYPE_PARENT,
            CoordType::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiCoordType> for CoordType {
    unsafe fn from_glib(value: ffi::AtspiCoordType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => CoordType::Screen,
            1 => CoordType::Window,
            2 => CoordType::Parent,
            value => CoordType::__Unknown(value),
}
    }
}

impl StaticType for CoordType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_coord_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for CoordType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for CoordType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for CoordType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiKeySynthType")]
pub enum KeySynthType {
    #[doc(alias = "ATSPI_KEY_PRESS")]
    Press,
    #[doc(alias = "ATSPI_KEY_RELEASE")]
    Release,
    #[doc(alias = "ATSPI_KEY_PRESSRELEASE")]
    Pressrelease,
    #[doc(alias = "ATSPI_KEY_SYM")]
    Sym,
    #[doc(alias = "ATSPI_KEY_STRING")]
    String,
    #[doc(alias = "ATSPI_KEY_LOCKMODIFIERS")]
    Lockmodifiers,
    #[doc(alias = "ATSPI_KEY_UNLOCKMODIFIERS")]
    Unlockmodifiers,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for KeySynthType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "KeySynthType::{}", match *self {
            KeySynthType::Press => "Press",
            KeySynthType::Release => "Release",
            KeySynthType::Pressrelease => "Pressrelease",
            KeySynthType::Sym => "Sym",
            KeySynthType::String => "String",
            KeySynthType::Lockmodifiers => "Lockmodifiers",
            KeySynthType::Unlockmodifiers => "Unlockmodifiers",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for KeySynthType {
    type GlibType = ffi::AtspiKeySynthType;

    fn to_glib(&self) -> ffi::AtspiKeySynthType {
        match *self {
            KeySynthType::Press => ffi::ATSPI_KEY_PRESS,
            KeySynthType::Release => ffi::ATSPI_KEY_RELEASE,
            KeySynthType::Pressrelease => ffi::ATSPI_KEY_PRESSRELEASE,
            KeySynthType::Sym => ffi::ATSPI_KEY_SYM,
            KeySynthType::String => ffi::ATSPI_KEY_STRING,
            KeySynthType::Lockmodifiers => ffi::ATSPI_KEY_LOCKMODIFIERS,
            KeySynthType::Unlockmodifiers => ffi::ATSPI_KEY_UNLOCKMODIFIERS,
            KeySynthType::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiKeySynthType> for KeySynthType {
    unsafe fn from_glib(value: ffi::AtspiKeySynthType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => KeySynthType::Press,
            1 => KeySynthType::Release,
            2 => KeySynthType::Pressrelease,
            3 => KeySynthType::Sym,
            4 => KeySynthType::String,
            5 => KeySynthType::Lockmodifiers,
            6 => KeySynthType::Unlockmodifiers,
            value => KeySynthType::__Unknown(value),
}
    }
}

impl StaticType for KeySynthType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_key_synth_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for KeySynthType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for KeySynthType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for KeySynthType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiRelationType")]
pub enum RelationType {
    #[doc(alias = "ATSPI_RELATION_NULL")]
    Null,
    #[doc(alias = "ATSPI_RELATION_LABEL_FOR")]
    LabelFor,
    #[doc(alias = "ATSPI_RELATION_LABELLED_BY")]
    LabelledBy,
    #[doc(alias = "ATSPI_RELATION_CONTROLLER_FOR")]
    ControllerFor,
    #[doc(alias = "ATSPI_RELATION_CONTROLLED_BY")]
    ControlledBy,
    #[doc(alias = "ATSPI_RELATION_MEMBER_OF")]
    MemberOf,
    #[doc(alias = "ATSPI_RELATION_TOOLTIP_FOR")]
    TooltipFor,
    #[doc(alias = "ATSPI_RELATION_NODE_CHILD_OF")]
    NodeChildOf,
    #[doc(alias = "ATSPI_RELATION_NODE_PARENT_OF")]
    NodeParentOf,
    #[doc(alias = "ATSPI_RELATION_EXTENDED")]
    Extended,
    #[doc(alias = "ATSPI_RELATION_FLOWS_TO")]
    FlowsTo,
    #[doc(alias = "ATSPI_RELATION_FLOWS_FROM")]
    FlowsFrom,
    #[doc(alias = "ATSPI_RELATION_SUBWINDOW_OF")]
    SubwindowOf,
    #[doc(alias = "ATSPI_RELATION_EMBEDS")]
    Embeds,
    #[doc(alias = "ATSPI_RELATION_EMBEDDED_BY")]
    EmbeddedBy,
    #[doc(alias = "ATSPI_RELATION_POPUP_FOR")]
    PopupFor,
    #[doc(alias = "ATSPI_RELATION_PARENT_WINDOW_OF")]
    ParentWindowOf,
    #[doc(alias = "ATSPI_RELATION_DESCRIPTION_FOR")]
    DescriptionFor,
    #[doc(alias = "ATSPI_RELATION_DESCRIBED_BY")]
    DescribedBy,
    #[doc(alias = "ATSPI_RELATION_DETAILS")]
    Details,
    #[doc(alias = "ATSPI_RELATION_DETAILS_FOR")]
    DetailsFor,
    #[doc(alias = "ATSPI_RELATION_ERROR_MESSAGE")]
    ErrorMessage,
    #[doc(alias = "ATSPI_RELATION_ERROR_FOR")]
    ErrorFor,
    #[doc(alias = "ATSPI_RELATION_LAST_DEFINED")]
    LastDefined,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for RelationType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "RelationType::{}", match *self {
            RelationType::Null => "Null",
            RelationType::LabelFor => "LabelFor",
            RelationType::LabelledBy => "LabelledBy",
            RelationType::ControllerFor => "ControllerFor",
            RelationType::ControlledBy => "ControlledBy",
            RelationType::MemberOf => "MemberOf",
            RelationType::TooltipFor => "TooltipFor",
            RelationType::NodeChildOf => "NodeChildOf",
            RelationType::NodeParentOf => "NodeParentOf",
            RelationType::Extended => "Extended",
            RelationType::FlowsTo => "FlowsTo",
            RelationType::FlowsFrom => "FlowsFrom",
            RelationType::SubwindowOf => "SubwindowOf",
            RelationType::Embeds => "Embeds",
            RelationType::EmbeddedBy => "EmbeddedBy",
            RelationType::PopupFor => "PopupFor",
            RelationType::ParentWindowOf => "ParentWindowOf",
            RelationType::DescriptionFor => "DescriptionFor",
            RelationType::DescribedBy => "DescribedBy",
            RelationType::Details => "Details",
            RelationType::DetailsFor => "DetailsFor",
            RelationType::ErrorMessage => "ErrorMessage",
            RelationType::ErrorFor => "ErrorFor",
            RelationType::LastDefined => "LastDefined",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for RelationType {
    type GlibType = ffi::AtspiRelationType;

    fn to_glib(&self) -> ffi::AtspiRelationType {
        match *self {
            RelationType::Null => ffi::ATSPI_RELATION_NULL,
            RelationType::LabelFor => ffi::ATSPI_RELATION_LABEL_FOR,
            RelationType::LabelledBy => ffi::ATSPI_RELATION_LABELLED_BY,
            RelationType::ControllerFor => ffi::ATSPI_RELATION_CONTROLLER_FOR,
            RelationType::ControlledBy => ffi::ATSPI_RELATION_CONTROLLED_BY,
            RelationType::MemberOf => ffi::ATSPI_RELATION_MEMBER_OF,
            RelationType::TooltipFor => ffi::ATSPI_RELATION_TOOLTIP_FOR,
            RelationType::NodeChildOf => ffi::ATSPI_RELATION_NODE_CHILD_OF,
            RelationType::NodeParentOf => ffi::ATSPI_RELATION_NODE_PARENT_OF,
            RelationType::Extended => ffi::ATSPI_RELATION_EXTENDED,
            RelationType::FlowsTo => ffi::ATSPI_RELATION_FLOWS_TO,
            RelationType::FlowsFrom => ffi::ATSPI_RELATION_FLOWS_FROM,
            RelationType::SubwindowOf => ffi::ATSPI_RELATION_SUBWINDOW_OF,
            RelationType::Embeds => ffi::ATSPI_RELATION_EMBEDS,
            RelationType::EmbeddedBy => ffi::ATSPI_RELATION_EMBEDDED_BY,
            RelationType::PopupFor => ffi::ATSPI_RELATION_POPUP_FOR,
            RelationType::ParentWindowOf => ffi::ATSPI_RELATION_PARENT_WINDOW_OF,
            RelationType::DescriptionFor => ffi::ATSPI_RELATION_DESCRIPTION_FOR,
            RelationType::DescribedBy => ffi::ATSPI_RELATION_DESCRIBED_BY,
            RelationType::Details => ffi::ATSPI_RELATION_DETAILS,
            RelationType::DetailsFor => ffi::ATSPI_RELATION_DETAILS_FOR,
            RelationType::ErrorMessage => ffi::ATSPI_RELATION_ERROR_MESSAGE,
            RelationType::ErrorFor => ffi::ATSPI_RELATION_ERROR_FOR,
            RelationType::LastDefined => ffi::ATSPI_RELATION_LAST_DEFINED,
            RelationType::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiRelationType> for RelationType {
    unsafe fn from_glib(value: ffi::AtspiRelationType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => RelationType::Null,
            1 => RelationType::LabelFor,
            2 => RelationType::LabelledBy,
            3 => RelationType::ControllerFor,
            4 => RelationType::ControlledBy,
            5 => RelationType::MemberOf,
            6 => RelationType::TooltipFor,
            7 => RelationType::NodeChildOf,
            8 => RelationType::NodeParentOf,
            9 => RelationType::Extended,
            10 => RelationType::FlowsTo,
            11 => RelationType::FlowsFrom,
            12 => RelationType::SubwindowOf,
            13 => RelationType::Embeds,
            14 => RelationType::EmbeddedBy,
            15 => RelationType::PopupFor,
            16 => RelationType::ParentWindowOf,
            17 => RelationType::DescriptionFor,
            18 => RelationType::DescribedBy,
            19 => RelationType::Details,
            20 => RelationType::DetailsFor,
            21 => RelationType::ErrorMessage,
            22 => RelationType::ErrorFor,
            23 => RelationType::LastDefined,
            value => RelationType::__Unknown(value),
}
    }
}

impl StaticType for RelationType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_relation_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for RelationType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for RelationType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for RelationType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiRole")]
pub enum Role {
    #[doc(alias = "ATSPI_ROLE_INVALID")]
    Invalid,
    #[doc(alias = "ATSPI_ROLE_ACCELERATOR_LABEL")]
    AcceleratorLabel,
    #[doc(alias = "ATSPI_ROLE_ALERT")]
    Alert,
    #[doc(alias = "ATSPI_ROLE_ANIMATION")]
    Animation,
    #[doc(alias = "ATSPI_ROLE_ARROW")]
    Arrow,
    #[doc(alias = "ATSPI_ROLE_CALENDAR")]
    Calendar,
    #[doc(alias = "ATSPI_ROLE_CANVAS")]
    Canvas,
    #[doc(alias = "ATSPI_ROLE_CHECK_BOX")]
    CheckBox,
    #[doc(alias = "ATSPI_ROLE_CHECK_MENU_ITEM")]
    CheckMenuItem,
    #[doc(alias = "ATSPI_ROLE_COLOR_CHOOSER")]
    ColorChooser,
    #[doc(alias = "ATSPI_ROLE_COLUMN_HEADER")]
    ColumnHeader,
    #[doc(alias = "ATSPI_ROLE_COMBO_BOX")]
    ComboBox,
    #[doc(alias = "ATSPI_ROLE_DATE_EDITOR")]
    DateEditor,
    #[doc(alias = "ATSPI_ROLE_DESKTOP_ICON")]
    DesktopIcon,
    #[doc(alias = "ATSPI_ROLE_DESKTOP_FRAME")]
    DesktopFrame,
    #[doc(alias = "ATSPI_ROLE_DIAL")]
    Dial,
    #[doc(alias = "ATSPI_ROLE_DIALOG")]
    Dialog,
    #[doc(alias = "ATSPI_ROLE_DIRECTORY_PANE")]
    DirectoryPane,
    #[doc(alias = "ATSPI_ROLE_DRAWING_AREA")]
    DrawingArea,
    #[doc(alias = "ATSPI_ROLE_FILE_CHOOSER")]
    FileChooser,
    #[doc(alias = "ATSPI_ROLE_FILLER")]
    Filler,
    #[doc(alias = "ATSPI_ROLE_FOCUS_TRAVERSABLE")]
    FocusTraversable,
    #[doc(alias = "ATSPI_ROLE_FONT_CHOOSER")]
    FontChooser,
    #[doc(alias = "ATSPI_ROLE_FRAME")]
    Frame,
    #[doc(alias = "ATSPI_ROLE_GLASS_PANE")]
    GlassPane,
    #[doc(alias = "ATSPI_ROLE_HTML_CONTAINER")]
    HtmlContainer,
    #[doc(alias = "ATSPI_ROLE_ICON")]
    Icon,
    #[doc(alias = "ATSPI_ROLE_IMAGE")]
    Image,
    #[doc(alias = "ATSPI_ROLE_INTERNAL_FRAME")]
    InternalFrame,
    #[doc(alias = "ATSPI_ROLE_LABEL")]
    Label,
    #[doc(alias = "ATSPI_ROLE_LAYERED_PANE")]
    LayeredPane,
    #[doc(alias = "ATSPI_ROLE_LIST")]
    List,
    #[doc(alias = "ATSPI_ROLE_LIST_ITEM")]
    ListItem,
    #[doc(alias = "ATSPI_ROLE_MENU")]
    Menu,
    #[doc(alias = "ATSPI_ROLE_MENU_BAR")]
    MenuBar,
    #[doc(alias = "ATSPI_ROLE_MENU_ITEM")]
    MenuItem,
    #[doc(alias = "ATSPI_ROLE_OPTION_PANE")]
    OptionPane,
    #[doc(alias = "ATSPI_ROLE_PAGE_TAB")]
    PageTab,
    #[doc(alias = "ATSPI_ROLE_PAGE_TAB_LIST")]
    PageTabList,
    #[doc(alias = "ATSPI_ROLE_PANEL")]
    Panel,
    #[doc(alias = "ATSPI_ROLE_PASSWORD_TEXT")]
    PasswordText,
    #[doc(alias = "ATSPI_ROLE_POPUP_MENU")]
    PopupMenu,
    #[doc(alias = "ATSPI_ROLE_PROGRESS_BAR")]
    ProgressBar,
    #[doc(alias = "ATSPI_ROLE_PUSH_BUTTON")]
    PushButton,
    #[doc(alias = "ATSPI_ROLE_RADIO_BUTTON")]
    RadioButton,
    #[doc(alias = "ATSPI_ROLE_RADIO_MENU_ITEM")]
    RadioMenuItem,
    #[doc(alias = "ATSPI_ROLE_ROOT_PANE")]
    RootPane,
    #[doc(alias = "ATSPI_ROLE_ROW_HEADER")]
    RowHeader,
    #[doc(alias = "ATSPI_ROLE_SCROLL_BAR")]
    ScrollBar,
    #[doc(alias = "ATSPI_ROLE_SCROLL_PANE")]
    ScrollPane,
    #[doc(alias = "ATSPI_ROLE_SEPARATOR")]
    Separator,
    #[doc(alias = "ATSPI_ROLE_SLIDER")]
    Slider,
    #[doc(alias = "ATSPI_ROLE_SPIN_BUTTON")]
    SpinButton,
    #[doc(alias = "ATSPI_ROLE_SPLIT_PANE")]
    SplitPane,
    #[doc(alias = "ATSPI_ROLE_STATUS_BAR")]
    StatusBar,
    #[doc(alias = "ATSPI_ROLE_TABLE")]
    Table,
    #[doc(alias = "ATSPI_ROLE_TABLE_CELL")]
    TableCell,
    #[doc(alias = "ATSPI_ROLE_TABLE_COLUMN_HEADER")]
    TableColumnHeader,
    #[doc(alias = "ATSPI_ROLE_TABLE_ROW_HEADER")]
    TableRowHeader,
    #[doc(alias = "ATSPI_ROLE_TEAROFF_MENU_ITEM")]
    TearoffMenuItem,
    #[doc(alias = "ATSPI_ROLE_TERMINAL")]
    Terminal,
    #[doc(alias = "ATSPI_ROLE_TEXT")]
    Text,
    #[doc(alias = "ATSPI_ROLE_TOGGLE_BUTTON")]
    ToggleButton,
    #[doc(alias = "ATSPI_ROLE_TOOL_BAR")]
    ToolBar,
    #[doc(alias = "ATSPI_ROLE_TOOL_TIP")]
    ToolTip,
    #[doc(alias = "ATSPI_ROLE_TREE")]
    Tree,
    #[doc(alias = "ATSPI_ROLE_TREE_TABLE")]
    TreeTable,
    #[doc(alias = "ATSPI_ROLE_UNKNOWN")]
    Unknown,
    #[doc(alias = "ATSPI_ROLE_VIEWPORT")]
    Viewport,
    #[doc(alias = "ATSPI_ROLE_WINDOW")]
    Window,
    #[doc(alias = "ATSPI_ROLE_EXTENDED")]
    Extended,
    #[doc(alias = "ATSPI_ROLE_HEADER")]
    Header,
    #[doc(alias = "ATSPI_ROLE_FOOTER")]
    Footer,
    #[doc(alias = "ATSPI_ROLE_PARAGRAPH")]
    Paragraph,
    #[doc(alias = "ATSPI_ROLE_RULER")]
    Ruler,
    #[doc(alias = "ATSPI_ROLE_APPLICATION")]
    Application,
    #[doc(alias = "ATSPI_ROLE_AUTOCOMPLETE")]
    Autocomplete,
    #[doc(alias = "ATSPI_ROLE_EDITBAR")]
    Editbar,
    #[doc(alias = "ATSPI_ROLE_EMBEDDED")]
    Embedded,
    #[doc(alias = "ATSPI_ROLE_ENTRY")]
    Entry,
    #[doc(alias = "ATSPI_ROLE_CHART")]
    Chart,
    #[doc(alias = "ATSPI_ROLE_CAPTION")]
    Caption,
    #[doc(alias = "ATSPI_ROLE_DOCUMENT_FRAME")]
    DocumentFrame,
    #[doc(alias = "ATSPI_ROLE_HEADING")]
    Heading,
    #[doc(alias = "ATSPI_ROLE_PAGE")]
    Page,
    #[doc(alias = "ATSPI_ROLE_SECTION")]
    Section,
    #[doc(alias = "ATSPI_ROLE_REDUNDANT_OBJECT")]
    RedundantObject,
    #[doc(alias = "ATSPI_ROLE_FORM")]
    Form,
    #[doc(alias = "ATSPI_ROLE_LINK")]
    Link,
    #[doc(alias = "ATSPI_ROLE_INPUT_METHOD_WINDOW")]
    InputMethodWindow,
    #[doc(alias = "ATSPI_ROLE_TABLE_ROW")]
    TableRow,
    #[doc(alias = "ATSPI_ROLE_TREE_ITEM")]
    TreeItem,
    #[doc(alias = "ATSPI_ROLE_DOCUMENT_SPREADSHEET")]
    DocumentSpreadsheet,
    #[doc(alias = "ATSPI_ROLE_DOCUMENT_PRESENTATION")]
    DocumentPresentation,
    #[doc(alias = "ATSPI_ROLE_DOCUMENT_TEXT")]
    DocumentText,
    #[doc(alias = "ATSPI_ROLE_DOCUMENT_WEB")]
    DocumentWeb,
    #[doc(alias = "ATSPI_ROLE_DOCUMENT_EMAIL")]
    DocumentEmail,
    #[doc(alias = "ATSPI_ROLE_COMMENT")]
    Comment,
    #[doc(alias = "ATSPI_ROLE_LIST_BOX")]
    ListBox,
    #[doc(alias = "ATSPI_ROLE_GROUPING")]
    Grouping,
    #[doc(alias = "ATSPI_ROLE_IMAGE_MAP")]
    ImageMap,
    #[doc(alias = "ATSPI_ROLE_NOTIFICATION")]
    Notification,
    #[doc(alias = "ATSPI_ROLE_INFO_BAR")]
    InfoBar,
    #[doc(alias = "ATSPI_ROLE_LEVEL_BAR")]
    LevelBar,
    #[doc(alias = "ATSPI_ROLE_TITLE_BAR")]
    TitleBar,
    #[doc(alias = "ATSPI_ROLE_BLOCK_QUOTE")]
    BlockQuote,
    #[doc(alias = "ATSPI_ROLE_AUDIO")]
    Audio,
    #[doc(alias = "ATSPI_ROLE_VIDEO")]
    Video,
    #[doc(alias = "ATSPI_ROLE_DEFINITION")]
    Definition,
    #[doc(alias = "ATSPI_ROLE_ARTICLE")]
    Article,
    #[doc(alias = "ATSPI_ROLE_LANDMARK")]
    Landmark,
    #[doc(alias = "ATSPI_ROLE_LOG")]
    Log,
    #[doc(alias = "ATSPI_ROLE_MARQUEE")]
    Marquee,
    #[doc(alias = "ATSPI_ROLE_MATH")]
    Math,
    #[doc(alias = "ATSPI_ROLE_RATING")]
    Rating,
    #[doc(alias = "ATSPI_ROLE_TIMER")]
    Timer,
    #[doc(alias = "ATSPI_ROLE_STATIC")]
    Static,
    #[doc(alias = "ATSPI_ROLE_MATH_FRACTION")]
    MathFraction,
    #[doc(alias = "ATSPI_ROLE_MATH_ROOT")]
    MathRoot,
    #[doc(alias = "ATSPI_ROLE_SUBSCRIPT")]
    Subscript,
    #[doc(alias = "ATSPI_ROLE_SUPERSCRIPT")]
    Superscript,
    #[doc(alias = "ATSPI_ROLE_DESCRIPTION_LIST")]
    DescriptionList,
    #[doc(alias = "ATSPI_ROLE_DESCRIPTION_TERM")]
    DescriptionTerm,
    #[doc(alias = "ATSPI_ROLE_DESCRIPTION_VALUE")]
    DescriptionValue,
    #[doc(alias = "ATSPI_ROLE_FOOTNOTE")]
    Footnote,
    #[doc(alias = "ATSPI_ROLE_CONTENT_DELETION")]
    ContentDeletion,
    #[doc(alias = "ATSPI_ROLE_CONTENT_INSERTION")]
    ContentInsertion,
    #[doc(alias = "ATSPI_ROLE_MARK")]
    Mark,
    #[doc(alias = "ATSPI_ROLE_SUGGESTION")]
    Suggestion,
    #[doc(alias = "ATSPI_ROLE_LAST_DEFINED")]
    LastDefined,
#[doc(hidden)]
    __Unknown(i32),
}

impl Role {
    #[doc(alias = "atspi_role_get_name")]
    pub fn get_name(self) -> Option<glib::GString> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::atspi_role_get_name(self.to_glib()))
        }
    }
}

impl fmt::Display for Role {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Role::{}", match *self {
            Role::Invalid => "Invalid",
            Role::AcceleratorLabel => "AcceleratorLabel",
            Role::Alert => "Alert",
            Role::Animation => "Animation",
            Role::Arrow => "Arrow",
            Role::Calendar => "Calendar",
            Role::Canvas => "Canvas",
            Role::CheckBox => "CheckBox",
            Role::CheckMenuItem => "CheckMenuItem",
            Role::ColorChooser => "ColorChooser",
            Role::ColumnHeader => "ColumnHeader",
            Role::ComboBox => "ComboBox",
            Role::DateEditor => "DateEditor",
            Role::DesktopIcon => "DesktopIcon",
            Role::DesktopFrame => "DesktopFrame",
            Role::Dial => "Dial",
            Role::Dialog => "Dialog",
            Role::DirectoryPane => "DirectoryPane",
            Role::DrawingArea => "DrawingArea",
            Role::FileChooser => "FileChooser",
            Role::Filler => "Filler",
            Role::FocusTraversable => "FocusTraversable",
            Role::FontChooser => "FontChooser",
            Role::Frame => "Frame",
            Role::GlassPane => "GlassPane",
            Role::HtmlContainer => "HtmlContainer",
            Role::Icon => "Icon",
            Role::Image => "Image",
            Role::InternalFrame => "InternalFrame",
            Role::Label => "Label",
            Role::LayeredPane => "LayeredPane",
            Role::List => "List",
            Role::ListItem => "ListItem",
            Role::Menu => "Menu",
            Role::MenuBar => "MenuBar",
            Role::MenuItem => "MenuItem",
            Role::OptionPane => "OptionPane",
            Role::PageTab => "PageTab",
            Role::PageTabList => "PageTabList",
            Role::Panel => "Panel",
            Role::PasswordText => "PasswordText",
            Role::PopupMenu => "PopupMenu",
            Role::ProgressBar => "ProgressBar",
            Role::PushButton => "PushButton",
            Role::RadioButton => "RadioButton",
            Role::RadioMenuItem => "RadioMenuItem",
            Role::RootPane => "RootPane",
            Role::RowHeader => "RowHeader",
            Role::ScrollBar => "ScrollBar",
            Role::ScrollPane => "ScrollPane",
            Role::Separator => "Separator",
            Role::Slider => "Slider",
            Role::SpinButton => "SpinButton",
            Role::SplitPane => "SplitPane",
            Role::StatusBar => "StatusBar",
            Role::Table => "Table",
            Role::TableCell => "TableCell",
            Role::TableColumnHeader => "TableColumnHeader",
            Role::TableRowHeader => "TableRowHeader",
            Role::TearoffMenuItem => "TearoffMenuItem",
            Role::Terminal => "Terminal",
            Role::Text => "Text",
            Role::ToggleButton => "ToggleButton",
            Role::ToolBar => "ToolBar",
            Role::ToolTip => "ToolTip",
            Role::Tree => "Tree",
            Role::TreeTable => "TreeTable",
            Role::Unknown => "Unknown",
            Role::Viewport => "Viewport",
            Role::Window => "Window",
            Role::Extended => "Extended",
            Role::Header => "Header",
            Role::Footer => "Footer",
            Role::Paragraph => "Paragraph",
            Role::Ruler => "Ruler",
            Role::Application => "Application",
            Role::Autocomplete => "Autocomplete",
            Role::Editbar => "Editbar",
            Role::Embedded => "Embedded",
            Role::Entry => "Entry",
            Role::Chart => "Chart",
            Role::Caption => "Caption",
            Role::DocumentFrame => "DocumentFrame",
            Role::Heading => "Heading",
            Role::Page => "Page",
            Role::Section => "Section",
            Role::RedundantObject => "RedundantObject",
            Role::Form => "Form",
            Role::Link => "Link",
            Role::InputMethodWindow => "InputMethodWindow",
            Role::TableRow => "TableRow",
            Role::TreeItem => "TreeItem",
            Role::DocumentSpreadsheet => "DocumentSpreadsheet",
            Role::DocumentPresentation => "DocumentPresentation",
            Role::DocumentText => "DocumentText",
            Role::DocumentWeb => "DocumentWeb",
            Role::DocumentEmail => "DocumentEmail",
            Role::Comment => "Comment",
            Role::ListBox => "ListBox",
            Role::Grouping => "Grouping",
            Role::ImageMap => "ImageMap",
            Role::Notification => "Notification",
            Role::InfoBar => "InfoBar",
            Role::LevelBar => "LevelBar",
            Role::TitleBar => "TitleBar",
            Role::BlockQuote => "BlockQuote",
            Role::Audio => "Audio",
            Role::Video => "Video",
            Role::Definition => "Definition",
            Role::Article => "Article",
            Role::Landmark => "Landmark",
            Role::Log => "Log",
            Role::Marquee => "Marquee",
            Role::Math => "Math",
            Role::Rating => "Rating",
            Role::Timer => "Timer",
            Role::Static => "Static",
            Role::MathFraction => "MathFraction",
            Role::MathRoot => "MathRoot",
            Role::Subscript => "Subscript",
            Role::Superscript => "Superscript",
            Role::DescriptionList => "DescriptionList",
            Role::DescriptionTerm => "DescriptionTerm",
            Role::DescriptionValue => "DescriptionValue",
            Role::Footnote => "Footnote",
            Role::ContentDeletion => "ContentDeletion",
            Role::ContentInsertion => "ContentInsertion",
            Role::Mark => "Mark",
            Role::Suggestion => "Suggestion",
            Role::LastDefined => "LastDefined",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for Role {
    type GlibType = ffi::AtspiRole;

    fn to_glib(&self) -> ffi::AtspiRole {
        match *self {
            Role::Invalid => ffi::ATSPI_ROLE_INVALID,
            Role::AcceleratorLabel => ffi::ATSPI_ROLE_ACCELERATOR_LABEL,
            Role::Alert => ffi::ATSPI_ROLE_ALERT,
            Role::Animation => ffi::ATSPI_ROLE_ANIMATION,
            Role::Arrow => ffi::ATSPI_ROLE_ARROW,
            Role::Calendar => ffi::ATSPI_ROLE_CALENDAR,
            Role::Canvas => ffi::ATSPI_ROLE_CANVAS,
            Role::CheckBox => ffi::ATSPI_ROLE_CHECK_BOX,
            Role::CheckMenuItem => ffi::ATSPI_ROLE_CHECK_MENU_ITEM,
            Role::ColorChooser => ffi::ATSPI_ROLE_COLOR_CHOOSER,
            Role::ColumnHeader => ffi::ATSPI_ROLE_COLUMN_HEADER,
            Role::ComboBox => ffi::ATSPI_ROLE_COMBO_BOX,
            Role::DateEditor => ffi::ATSPI_ROLE_DATE_EDITOR,
            Role::DesktopIcon => ffi::ATSPI_ROLE_DESKTOP_ICON,
            Role::DesktopFrame => ffi::ATSPI_ROLE_DESKTOP_FRAME,
            Role::Dial => ffi::ATSPI_ROLE_DIAL,
            Role::Dialog => ffi::ATSPI_ROLE_DIALOG,
            Role::DirectoryPane => ffi::ATSPI_ROLE_DIRECTORY_PANE,
            Role::DrawingArea => ffi::ATSPI_ROLE_DRAWING_AREA,
            Role::FileChooser => ffi::ATSPI_ROLE_FILE_CHOOSER,
            Role::Filler => ffi::ATSPI_ROLE_FILLER,
            Role::FocusTraversable => ffi::ATSPI_ROLE_FOCUS_TRAVERSABLE,
            Role::FontChooser => ffi::ATSPI_ROLE_FONT_CHOOSER,
            Role::Frame => ffi::ATSPI_ROLE_FRAME,
            Role::GlassPane => ffi::ATSPI_ROLE_GLASS_PANE,
            Role::HtmlContainer => ffi::ATSPI_ROLE_HTML_CONTAINER,
            Role::Icon => ffi::ATSPI_ROLE_ICON,
            Role::Image => ffi::ATSPI_ROLE_IMAGE,
            Role::InternalFrame => ffi::ATSPI_ROLE_INTERNAL_FRAME,
            Role::Label => ffi::ATSPI_ROLE_LABEL,
            Role::LayeredPane => ffi::ATSPI_ROLE_LAYERED_PANE,
            Role::List => ffi::ATSPI_ROLE_LIST,
            Role::ListItem => ffi::ATSPI_ROLE_LIST_ITEM,
            Role::Menu => ffi::ATSPI_ROLE_MENU,
            Role::MenuBar => ffi::ATSPI_ROLE_MENU_BAR,
            Role::MenuItem => ffi::ATSPI_ROLE_MENU_ITEM,
            Role::OptionPane => ffi::ATSPI_ROLE_OPTION_PANE,
            Role::PageTab => ffi::ATSPI_ROLE_PAGE_TAB,
            Role::PageTabList => ffi::ATSPI_ROLE_PAGE_TAB_LIST,
            Role::Panel => ffi::ATSPI_ROLE_PANEL,
            Role::PasswordText => ffi::ATSPI_ROLE_PASSWORD_TEXT,
            Role::PopupMenu => ffi::ATSPI_ROLE_POPUP_MENU,
            Role::ProgressBar => ffi::ATSPI_ROLE_PROGRESS_BAR,
            Role::PushButton => ffi::ATSPI_ROLE_PUSH_BUTTON,
            Role::RadioButton => ffi::ATSPI_ROLE_RADIO_BUTTON,
            Role::RadioMenuItem => ffi::ATSPI_ROLE_RADIO_MENU_ITEM,
            Role::RootPane => ffi::ATSPI_ROLE_ROOT_PANE,
            Role::RowHeader => ffi::ATSPI_ROLE_ROW_HEADER,
            Role::ScrollBar => ffi::ATSPI_ROLE_SCROLL_BAR,
            Role::ScrollPane => ffi::ATSPI_ROLE_SCROLL_PANE,
            Role::Separator => ffi::ATSPI_ROLE_SEPARATOR,
            Role::Slider => ffi::ATSPI_ROLE_SLIDER,
            Role::SpinButton => ffi::ATSPI_ROLE_SPIN_BUTTON,
            Role::SplitPane => ffi::ATSPI_ROLE_SPLIT_PANE,
            Role::StatusBar => ffi::ATSPI_ROLE_STATUS_BAR,
            Role::Table => ffi::ATSPI_ROLE_TABLE,
            Role::TableCell => ffi::ATSPI_ROLE_TABLE_CELL,
            Role::TableColumnHeader => ffi::ATSPI_ROLE_TABLE_COLUMN_HEADER,
            Role::TableRowHeader => ffi::ATSPI_ROLE_TABLE_ROW_HEADER,
            Role::TearoffMenuItem => ffi::ATSPI_ROLE_TEAROFF_MENU_ITEM,
            Role::Terminal => ffi::ATSPI_ROLE_TERMINAL,
            Role::Text => ffi::ATSPI_ROLE_TEXT,
            Role::ToggleButton => ffi::ATSPI_ROLE_TOGGLE_BUTTON,
            Role::ToolBar => ffi::ATSPI_ROLE_TOOL_BAR,
            Role::ToolTip => ffi::ATSPI_ROLE_TOOL_TIP,
            Role::Tree => ffi::ATSPI_ROLE_TREE,
            Role::TreeTable => ffi::ATSPI_ROLE_TREE_TABLE,
            Role::Unknown => ffi::ATSPI_ROLE_UNKNOWN,
            Role::Viewport => ffi::ATSPI_ROLE_VIEWPORT,
            Role::Window => ffi::ATSPI_ROLE_WINDOW,
            Role::Extended => ffi::ATSPI_ROLE_EXTENDED,
            Role::Header => ffi::ATSPI_ROLE_HEADER,
            Role::Footer => ffi::ATSPI_ROLE_FOOTER,
            Role::Paragraph => ffi::ATSPI_ROLE_PARAGRAPH,
            Role::Ruler => ffi::ATSPI_ROLE_RULER,
            Role::Application => ffi::ATSPI_ROLE_APPLICATION,
            Role::Autocomplete => ffi::ATSPI_ROLE_AUTOCOMPLETE,
            Role::Editbar => ffi::ATSPI_ROLE_EDITBAR,
            Role::Embedded => ffi::ATSPI_ROLE_EMBEDDED,
            Role::Entry => ffi::ATSPI_ROLE_ENTRY,
            Role::Chart => ffi::ATSPI_ROLE_CHART,
            Role::Caption => ffi::ATSPI_ROLE_CAPTION,
            Role::DocumentFrame => ffi::ATSPI_ROLE_DOCUMENT_FRAME,
            Role::Heading => ffi::ATSPI_ROLE_HEADING,
            Role::Page => ffi::ATSPI_ROLE_PAGE,
            Role::Section => ffi::ATSPI_ROLE_SECTION,
            Role::RedundantObject => ffi::ATSPI_ROLE_REDUNDANT_OBJECT,
            Role::Form => ffi::ATSPI_ROLE_FORM,
            Role::Link => ffi::ATSPI_ROLE_LINK,
            Role::InputMethodWindow => ffi::ATSPI_ROLE_INPUT_METHOD_WINDOW,
            Role::TableRow => ffi::ATSPI_ROLE_TABLE_ROW,
            Role::TreeItem => ffi::ATSPI_ROLE_TREE_ITEM,
            Role::DocumentSpreadsheet => ffi::ATSPI_ROLE_DOCUMENT_SPREADSHEET,
            Role::DocumentPresentation => ffi::ATSPI_ROLE_DOCUMENT_PRESENTATION,
            Role::DocumentText => ffi::ATSPI_ROLE_DOCUMENT_TEXT,
            Role::DocumentWeb => ffi::ATSPI_ROLE_DOCUMENT_WEB,
            Role::DocumentEmail => ffi::ATSPI_ROLE_DOCUMENT_EMAIL,
            Role::Comment => ffi::ATSPI_ROLE_COMMENT,
            Role::ListBox => ffi::ATSPI_ROLE_LIST_BOX,
            Role::Grouping => ffi::ATSPI_ROLE_GROUPING,
            Role::ImageMap => ffi::ATSPI_ROLE_IMAGE_MAP,
            Role::Notification => ffi::ATSPI_ROLE_NOTIFICATION,
            Role::InfoBar => ffi::ATSPI_ROLE_INFO_BAR,
            Role::LevelBar => ffi::ATSPI_ROLE_LEVEL_BAR,
            Role::TitleBar => ffi::ATSPI_ROLE_TITLE_BAR,
            Role::BlockQuote => ffi::ATSPI_ROLE_BLOCK_QUOTE,
            Role::Audio => ffi::ATSPI_ROLE_AUDIO,
            Role::Video => ffi::ATSPI_ROLE_VIDEO,
            Role::Definition => ffi::ATSPI_ROLE_DEFINITION,
            Role::Article => ffi::ATSPI_ROLE_ARTICLE,
            Role::Landmark => ffi::ATSPI_ROLE_LANDMARK,
            Role::Log => ffi::ATSPI_ROLE_LOG,
            Role::Marquee => ffi::ATSPI_ROLE_MARQUEE,
            Role::Math => ffi::ATSPI_ROLE_MATH,
            Role::Rating => ffi::ATSPI_ROLE_RATING,
            Role::Timer => ffi::ATSPI_ROLE_TIMER,
            Role::Static => ffi::ATSPI_ROLE_STATIC,
            Role::MathFraction => ffi::ATSPI_ROLE_MATH_FRACTION,
            Role::MathRoot => ffi::ATSPI_ROLE_MATH_ROOT,
            Role::Subscript => ffi::ATSPI_ROLE_SUBSCRIPT,
            Role::Superscript => ffi::ATSPI_ROLE_SUPERSCRIPT,
            Role::DescriptionList => ffi::ATSPI_ROLE_DESCRIPTION_LIST,
            Role::DescriptionTerm => ffi::ATSPI_ROLE_DESCRIPTION_TERM,
            Role::DescriptionValue => ffi::ATSPI_ROLE_DESCRIPTION_VALUE,
            Role::Footnote => ffi::ATSPI_ROLE_FOOTNOTE,
            Role::ContentDeletion => ffi::ATSPI_ROLE_CONTENT_DELETION,
            Role::ContentInsertion => ffi::ATSPI_ROLE_CONTENT_INSERTION,
            Role::Mark => ffi::ATSPI_ROLE_MARK,
            Role::Suggestion => ffi::ATSPI_ROLE_SUGGESTION,
            Role::LastDefined => ffi::ATSPI_ROLE_LAST_DEFINED,
            Role::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiRole> for Role {
    unsafe fn from_glib(value: ffi::AtspiRole) -> Self {
        skip_assert_initialized!();
        match value {
            0 => Role::Invalid,
            1 => Role::AcceleratorLabel,
            2 => Role::Alert,
            3 => Role::Animation,
            4 => Role::Arrow,
            5 => Role::Calendar,
            6 => Role::Canvas,
            7 => Role::CheckBox,
            8 => Role::CheckMenuItem,
            9 => Role::ColorChooser,
            10 => Role::ColumnHeader,
            11 => Role::ComboBox,
            12 => Role::DateEditor,
            13 => Role::DesktopIcon,
            14 => Role::DesktopFrame,
            15 => Role::Dial,
            16 => Role::Dialog,
            17 => Role::DirectoryPane,
            18 => Role::DrawingArea,
            19 => Role::FileChooser,
            20 => Role::Filler,
            21 => Role::FocusTraversable,
            22 => Role::FontChooser,
            23 => Role::Frame,
            24 => Role::GlassPane,
            25 => Role::HtmlContainer,
            26 => Role::Icon,
            27 => Role::Image,
            28 => Role::InternalFrame,
            29 => Role::Label,
            30 => Role::LayeredPane,
            31 => Role::List,
            32 => Role::ListItem,
            33 => Role::Menu,
            34 => Role::MenuBar,
            35 => Role::MenuItem,
            36 => Role::OptionPane,
            37 => Role::PageTab,
            38 => Role::PageTabList,
            39 => Role::Panel,
            40 => Role::PasswordText,
            41 => Role::PopupMenu,
            42 => Role::ProgressBar,
            43 => Role::PushButton,
            44 => Role::RadioButton,
            45 => Role::RadioMenuItem,
            46 => Role::RootPane,
            47 => Role::RowHeader,
            48 => Role::ScrollBar,
            49 => Role::ScrollPane,
            50 => Role::Separator,
            51 => Role::Slider,
            52 => Role::SpinButton,
            53 => Role::SplitPane,
            54 => Role::StatusBar,
            55 => Role::Table,
            56 => Role::TableCell,
            57 => Role::TableColumnHeader,
            58 => Role::TableRowHeader,
            59 => Role::TearoffMenuItem,
            60 => Role::Terminal,
            61 => Role::Text,
            62 => Role::ToggleButton,
            63 => Role::ToolBar,
            64 => Role::ToolTip,
            65 => Role::Tree,
            66 => Role::TreeTable,
            67 => Role::Unknown,
            68 => Role::Viewport,
            69 => Role::Window,
            70 => Role::Extended,
            71 => Role::Header,
            72 => Role::Footer,
            73 => Role::Paragraph,
            74 => Role::Ruler,
            75 => Role::Application,
            76 => Role::Autocomplete,
            77 => Role::Editbar,
            78 => Role::Embedded,
            79 => Role::Entry,
            80 => Role::Chart,
            81 => Role::Caption,
            82 => Role::DocumentFrame,
            83 => Role::Heading,
            84 => Role::Page,
            85 => Role::Section,
            86 => Role::RedundantObject,
            87 => Role::Form,
            88 => Role::Link,
            89 => Role::InputMethodWindow,
            90 => Role::TableRow,
            91 => Role::TreeItem,
            92 => Role::DocumentSpreadsheet,
            93 => Role::DocumentPresentation,
            94 => Role::DocumentText,
            95 => Role::DocumentWeb,
            96 => Role::DocumentEmail,
            97 => Role::Comment,
            98 => Role::ListBox,
            99 => Role::Grouping,
            100 => Role::ImageMap,
            101 => Role::Notification,
            102 => Role::InfoBar,
            103 => Role::LevelBar,
            104 => Role::TitleBar,
            105 => Role::BlockQuote,
            106 => Role::Audio,
            107 => Role::Video,
            108 => Role::Definition,
            109 => Role::Article,
            110 => Role::Landmark,
            111 => Role::Log,
            112 => Role::Marquee,
            113 => Role::Math,
            114 => Role::Rating,
            115 => Role::Timer,
            116 => Role::Static,
            117 => Role::MathFraction,
            118 => Role::MathRoot,
            119 => Role::Subscript,
            120 => Role::Superscript,
            121 => Role::DescriptionList,
            122 => Role::DescriptionTerm,
            123 => Role::DescriptionValue,
            124 => Role::Footnote,
            125 => Role::ContentDeletion,
            126 => Role::ContentInsertion,
            127 => Role::Mark,
            128 => Role::Suggestion,
            129 => Role::LastDefined,
            value => Role::__Unknown(value),
}
    }
}

impl StaticType for Role {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_role_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Role {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Role {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for Role {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiStateType")]
pub enum StateType {
    #[doc(alias = "ATSPI_STATE_INVALID")]
    Invalid,
    #[doc(alias = "ATSPI_STATE_ACTIVE")]
    Active,
    #[doc(alias = "ATSPI_STATE_ARMED")]
    Armed,
    #[doc(alias = "ATSPI_STATE_BUSY")]
    Busy,
    #[doc(alias = "ATSPI_STATE_CHECKED")]
    Checked,
    #[doc(alias = "ATSPI_STATE_COLLAPSED")]
    Collapsed,
    #[doc(alias = "ATSPI_STATE_DEFUNCT")]
    Defunct,
    #[doc(alias = "ATSPI_STATE_EDITABLE")]
    Editable,
    #[doc(alias = "ATSPI_STATE_ENABLED")]
    Enabled,
    #[doc(alias = "ATSPI_STATE_EXPANDABLE")]
    Expandable,
    #[doc(alias = "ATSPI_STATE_EXPANDED")]
    Expanded,
    #[doc(alias = "ATSPI_STATE_FOCUSABLE")]
    Focusable,
    #[doc(alias = "ATSPI_STATE_FOCUSED")]
    Focused,
    #[doc(alias = "ATSPI_STATE_HAS_TOOLTIP")]
    HasTooltip,
    #[doc(alias = "ATSPI_STATE_HORIZONTAL")]
    Horizontal,
    #[doc(alias = "ATSPI_STATE_ICONIFIED")]
    Iconified,
    #[doc(alias = "ATSPI_STATE_MODAL")]
    Modal,
    #[doc(alias = "ATSPI_STATE_MULTI_LINE")]
    MultiLine,
    #[doc(alias = "ATSPI_STATE_MULTISELECTABLE")]
    Multiselectable,
    #[doc(alias = "ATSPI_STATE_OPAQUE")]
    Opaque,
    #[doc(alias = "ATSPI_STATE_PRESSED")]
    Pressed,
    #[doc(alias = "ATSPI_STATE_RESIZABLE")]
    Resizable,
    #[doc(alias = "ATSPI_STATE_SELECTABLE")]
    Selectable,
    #[doc(alias = "ATSPI_STATE_SELECTED")]
    Selected,
    #[doc(alias = "ATSPI_STATE_SENSITIVE")]
    Sensitive,
    #[doc(alias = "ATSPI_STATE_SHOWING")]
    Showing,
    #[doc(alias = "ATSPI_STATE_SINGLE_LINE")]
    SingleLine,
    #[doc(alias = "ATSPI_STATE_STALE")]
    Stale,
    #[doc(alias = "ATSPI_STATE_TRANSIENT")]
    Transient,
    #[doc(alias = "ATSPI_STATE_VERTICAL")]
    Vertical,
    #[doc(alias = "ATSPI_STATE_VISIBLE")]
    Visible,
    #[doc(alias = "ATSPI_STATE_MANAGES_DESCENDANTS")]
    ManagesDescendants,
    #[doc(alias = "ATSPI_STATE_INDETERMINATE")]
    Indeterminate,
    #[doc(alias = "ATSPI_STATE_REQUIRED")]
    Required,
    #[doc(alias = "ATSPI_STATE_TRUNCATED")]
    Truncated,
    #[doc(alias = "ATSPI_STATE_ANIMATED")]
    Animated,
    #[doc(alias = "ATSPI_STATE_INVALID_ENTRY")]
    InvalidEntry,
    #[doc(alias = "ATSPI_STATE_SUPPORTS_AUTOCOMPLETION")]
    SupportsAutocompletion,
    #[doc(alias = "ATSPI_STATE_SELECTABLE_TEXT")]
    SelectableText,
    #[doc(alias = "ATSPI_STATE_IS_DEFAULT")]
    IsDefault,
    #[doc(alias = "ATSPI_STATE_VISITED")]
    Visited,
    #[doc(alias = "ATSPI_STATE_CHECKABLE")]
    Checkable,
    #[doc(alias = "ATSPI_STATE_HAS_POPUP")]
    HasPopup,
    #[doc(alias = "ATSPI_STATE_READ_ONLY")]
    ReadOnly,
    #[doc(alias = "ATSPI_STATE_LAST_DEFINED")]
    LastDefined,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for StateType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StateType::{}", match *self {
            StateType::Invalid => "Invalid",
            StateType::Active => "Active",
            StateType::Armed => "Armed",
            StateType::Busy => "Busy",
            StateType::Checked => "Checked",
            StateType::Collapsed => "Collapsed",
            StateType::Defunct => "Defunct",
            StateType::Editable => "Editable",
            StateType::Enabled => "Enabled",
            StateType::Expandable => "Expandable",
            StateType::Expanded => "Expanded",
            StateType::Focusable => "Focusable",
            StateType::Focused => "Focused",
            StateType::HasTooltip => "HasTooltip",
            StateType::Horizontal => "Horizontal",
            StateType::Iconified => "Iconified",
            StateType::Modal => "Modal",
            StateType::MultiLine => "MultiLine",
            StateType::Multiselectable => "Multiselectable",
            StateType::Opaque => "Opaque",
            StateType::Pressed => "Pressed",
            StateType::Resizable => "Resizable",
            StateType::Selectable => "Selectable",
            StateType::Selected => "Selected",
            StateType::Sensitive => "Sensitive",
            StateType::Showing => "Showing",
            StateType::SingleLine => "SingleLine",
            StateType::Stale => "Stale",
            StateType::Transient => "Transient",
            StateType::Vertical => "Vertical",
            StateType::Visible => "Visible",
            StateType::ManagesDescendants => "ManagesDescendants",
            StateType::Indeterminate => "Indeterminate",
            StateType::Required => "Required",
            StateType::Truncated => "Truncated",
            StateType::Animated => "Animated",
            StateType::InvalidEntry => "InvalidEntry",
            StateType::SupportsAutocompletion => "SupportsAutocompletion",
            StateType::SelectableText => "SelectableText",
            StateType::IsDefault => "IsDefault",
            StateType::Visited => "Visited",
            StateType::Checkable => "Checkable",
            StateType::HasPopup => "HasPopup",
            StateType::ReadOnly => "ReadOnly",
            StateType::LastDefined => "LastDefined",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for StateType {
    type GlibType = ffi::AtspiStateType;

    fn to_glib(&self) -> ffi::AtspiStateType {
        match *self {
            StateType::Invalid => ffi::ATSPI_STATE_INVALID,
            StateType::Active => ffi::ATSPI_STATE_ACTIVE,
            StateType::Armed => ffi::ATSPI_STATE_ARMED,
            StateType::Busy => ffi::ATSPI_STATE_BUSY,
            StateType::Checked => ffi::ATSPI_STATE_CHECKED,
            StateType::Collapsed => ffi::ATSPI_STATE_COLLAPSED,
            StateType::Defunct => ffi::ATSPI_STATE_DEFUNCT,
            StateType::Editable => ffi::ATSPI_STATE_EDITABLE,
            StateType::Enabled => ffi::ATSPI_STATE_ENABLED,
            StateType::Expandable => ffi::ATSPI_STATE_EXPANDABLE,
            StateType::Expanded => ffi::ATSPI_STATE_EXPANDED,
            StateType::Focusable => ffi::ATSPI_STATE_FOCUSABLE,
            StateType::Focused => ffi::ATSPI_STATE_FOCUSED,
            StateType::HasTooltip => ffi::ATSPI_STATE_HAS_TOOLTIP,
            StateType::Horizontal => ffi::ATSPI_STATE_HORIZONTAL,
            StateType::Iconified => ffi::ATSPI_STATE_ICONIFIED,
            StateType::Modal => ffi::ATSPI_STATE_MODAL,
            StateType::MultiLine => ffi::ATSPI_STATE_MULTI_LINE,
            StateType::Multiselectable => ffi::ATSPI_STATE_MULTISELECTABLE,
            StateType::Opaque => ffi::ATSPI_STATE_OPAQUE,
            StateType::Pressed => ffi::ATSPI_STATE_PRESSED,
            StateType::Resizable => ffi::ATSPI_STATE_RESIZABLE,
            StateType::Selectable => ffi::ATSPI_STATE_SELECTABLE,
            StateType::Selected => ffi::ATSPI_STATE_SELECTED,
            StateType::Sensitive => ffi::ATSPI_STATE_SENSITIVE,
            StateType::Showing => ffi::ATSPI_STATE_SHOWING,
            StateType::SingleLine => ffi::ATSPI_STATE_SINGLE_LINE,
            StateType::Stale => ffi::ATSPI_STATE_STALE,
            StateType::Transient => ffi::ATSPI_STATE_TRANSIENT,
            StateType::Vertical => ffi::ATSPI_STATE_VERTICAL,
            StateType::Visible => ffi::ATSPI_STATE_VISIBLE,
            StateType::ManagesDescendants => ffi::ATSPI_STATE_MANAGES_DESCENDANTS,
            StateType::Indeterminate => ffi::ATSPI_STATE_INDETERMINATE,
            StateType::Required => ffi::ATSPI_STATE_REQUIRED,
            StateType::Truncated => ffi::ATSPI_STATE_TRUNCATED,
            StateType::Animated => ffi::ATSPI_STATE_ANIMATED,
            StateType::InvalidEntry => ffi::ATSPI_STATE_INVALID_ENTRY,
            StateType::SupportsAutocompletion => ffi::ATSPI_STATE_SUPPORTS_AUTOCOMPLETION,
            StateType::SelectableText => ffi::ATSPI_STATE_SELECTABLE_TEXT,
            StateType::IsDefault => ffi::ATSPI_STATE_IS_DEFAULT,
            StateType::Visited => ffi::ATSPI_STATE_VISITED,
            StateType::Checkable => ffi::ATSPI_STATE_CHECKABLE,
            StateType::HasPopup => ffi::ATSPI_STATE_HAS_POPUP,
            StateType::ReadOnly => ffi::ATSPI_STATE_READ_ONLY,
            StateType::LastDefined => ffi::ATSPI_STATE_LAST_DEFINED,
            StateType::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiStateType> for StateType {
    unsafe fn from_glib(value: ffi::AtspiStateType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => StateType::Invalid,
            1 => StateType::Active,
            2 => StateType::Armed,
            3 => StateType::Busy,
            4 => StateType::Checked,
            5 => StateType::Collapsed,
            6 => StateType::Defunct,
            7 => StateType::Editable,
            8 => StateType::Enabled,
            9 => StateType::Expandable,
            10 => StateType::Expanded,
            11 => StateType::Focusable,
            12 => StateType::Focused,
            13 => StateType::HasTooltip,
            14 => StateType::Horizontal,
            15 => StateType::Iconified,
            16 => StateType::Modal,
            17 => StateType::MultiLine,
            18 => StateType::Multiselectable,
            19 => StateType::Opaque,
            20 => StateType::Pressed,
            21 => StateType::Resizable,
            22 => StateType::Selectable,
            23 => StateType::Selected,
            24 => StateType::Sensitive,
            25 => StateType::Showing,
            26 => StateType::SingleLine,
            27 => StateType::Stale,
            28 => StateType::Transient,
            29 => StateType::Vertical,
            30 => StateType::Visible,
            31 => StateType::ManagesDescendants,
            32 => StateType::Indeterminate,
            33 => StateType::Required,
            34 => StateType::Truncated,
            35 => StateType::Animated,
            36 => StateType::InvalidEntry,
            37 => StateType::SupportsAutocompletion,
            38 => StateType::SelectableText,
            39 => StateType::IsDefault,
            40 => StateType::Visited,
            41 => StateType::Checkable,
            42 => StateType::HasPopup,
            43 => StateType::ReadOnly,
            44 => StateType::LastDefined,
            value => StateType::__Unknown(value),
}
    }
}

impl StaticType for StateType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_state_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for StateType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for StateType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for StateType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiTextBoundaryType")]
pub enum TextBoundaryType {
    #[doc(alias = "ATSPI_TEXT_BOUNDARY_CHAR")]
    Char,
    #[doc(alias = "ATSPI_TEXT_BOUNDARY_WORD_START")]
    WordStart,
    #[doc(alias = "ATSPI_TEXT_BOUNDARY_WORD_END")]
    WordEnd,
    #[doc(alias = "ATSPI_TEXT_BOUNDARY_SENTENCE_START")]
    SentenceStart,
    #[doc(alias = "ATSPI_TEXT_BOUNDARY_SENTENCE_END")]
    SentenceEnd,
    #[doc(alias = "ATSPI_TEXT_BOUNDARY_LINE_START")]
    LineStart,
    #[doc(alias = "ATSPI_TEXT_BOUNDARY_LINE_END")]
    LineEnd,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TextBoundaryType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TextBoundaryType::{}", match *self {
            TextBoundaryType::Char => "Char",
            TextBoundaryType::WordStart => "WordStart",
            TextBoundaryType::WordEnd => "WordEnd",
            TextBoundaryType::SentenceStart => "SentenceStart",
            TextBoundaryType::SentenceEnd => "SentenceEnd",
            TextBoundaryType::LineStart => "LineStart",
            TextBoundaryType::LineEnd => "LineEnd",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for TextBoundaryType {
    type GlibType = ffi::AtspiTextBoundaryType;

    fn to_glib(&self) -> ffi::AtspiTextBoundaryType {
        match *self {
            TextBoundaryType::Char => ffi::ATSPI_TEXT_BOUNDARY_CHAR,
            TextBoundaryType::WordStart => ffi::ATSPI_TEXT_BOUNDARY_WORD_START,
            TextBoundaryType::WordEnd => ffi::ATSPI_TEXT_BOUNDARY_WORD_END,
            TextBoundaryType::SentenceStart => ffi::ATSPI_TEXT_BOUNDARY_SENTENCE_START,
            TextBoundaryType::SentenceEnd => ffi::ATSPI_TEXT_BOUNDARY_SENTENCE_END,
            TextBoundaryType::LineStart => ffi::ATSPI_TEXT_BOUNDARY_LINE_START,
            TextBoundaryType::LineEnd => ffi::ATSPI_TEXT_BOUNDARY_LINE_END,
            TextBoundaryType::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiTextBoundaryType> for TextBoundaryType {
    unsafe fn from_glib(value: ffi::AtspiTextBoundaryType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => TextBoundaryType::Char,
            1 => TextBoundaryType::WordStart,
            2 => TextBoundaryType::WordEnd,
            3 => TextBoundaryType::SentenceStart,
            4 => TextBoundaryType::SentenceEnd,
            5 => TextBoundaryType::LineStart,
            6 => TextBoundaryType::LineEnd,
            value => TextBoundaryType::__Unknown(value),
}
    }
}

impl StaticType for TextBoundaryType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_text_boundary_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for TextBoundaryType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for TextBoundaryType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for TextBoundaryType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiTextClipType")]
pub enum TextClipType {
    #[doc(alias = "ATSPI_TEXT_CLIP_NONE")]
    None,
    #[doc(alias = "ATSPI_TEXT_CLIP_MIN")]
    Min,
    #[doc(alias = "ATSPI_TEXT_CLIP_MAX")]
    Max,
    #[doc(alias = "ATSPI_TEXT_CLIP_BOTH")]
    Both,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TextClipType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TextClipType::{}", match *self {
            TextClipType::None => "None",
            TextClipType::Min => "Min",
            TextClipType::Max => "Max",
            TextClipType::Both => "Both",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for TextClipType {
    type GlibType = ffi::AtspiTextClipType;

    fn to_glib(&self) -> ffi::AtspiTextClipType {
        match *self {
            TextClipType::None => ffi::ATSPI_TEXT_CLIP_NONE,
            TextClipType::Min => ffi::ATSPI_TEXT_CLIP_MIN,
            TextClipType::Max => ffi::ATSPI_TEXT_CLIP_MAX,
            TextClipType::Both => ffi::ATSPI_TEXT_CLIP_BOTH,
            TextClipType::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiTextClipType> for TextClipType {
    unsafe fn from_glib(value: ffi::AtspiTextClipType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => TextClipType::None,
            1 => TextClipType::Min,
            2 => TextClipType::Max,
            3 => TextClipType::Both,
            value => TextClipType::__Unknown(value),
}
    }
}

impl StaticType for TextClipType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_text_clip_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for TextClipType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for TextClipType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for TextClipType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiTextGranularity")]
pub enum TextGranularity {
    #[doc(alias = "ATSPI_TEXT_GRANULARITY_CHAR")]
    Char,
    #[doc(alias = "ATSPI_TEXT_GRANULARITY_WORD")]
    Word,
    #[doc(alias = "ATSPI_TEXT_GRANULARITY_SENTENCE")]
    Sentence,
    #[doc(alias = "ATSPI_TEXT_GRANULARITY_LINE")]
    Line,
    #[doc(alias = "ATSPI_TEXT_GRANULARITY_PARAGRAPH")]
    Paragraph,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TextGranularity {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TextGranularity::{}", match *self {
            TextGranularity::Char => "Char",
            TextGranularity::Word => "Word",
            TextGranularity::Sentence => "Sentence",
            TextGranularity::Line => "Line",
            TextGranularity::Paragraph => "Paragraph",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for TextGranularity {
    type GlibType = ffi::AtspiTextGranularity;

    fn to_glib(&self) -> ffi::AtspiTextGranularity {
        match *self {
            TextGranularity::Char => ffi::ATSPI_TEXT_GRANULARITY_CHAR,
            TextGranularity::Word => ffi::ATSPI_TEXT_GRANULARITY_WORD,
            TextGranularity::Sentence => ffi::ATSPI_TEXT_GRANULARITY_SENTENCE,
            TextGranularity::Line => ffi::ATSPI_TEXT_GRANULARITY_LINE,
            TextGranularity::Paragraph => ffi::ATSPI_TEXT_GRANULARITY_PARAGRAPH,
            TextGranularity::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiTextGranularity> for TextGranularity {
    unsafe fn from_glib(value: ffi::AtspiTextGranularity) -> Self {
        skip_assert_initialized!();
        match value {
            0 => TextGranularity::Char,
            1 => TextGranularity::Word,
            2 => TextGranularity::Sentence,
            3 => TextGranularity::Line,
            4 => TextGranularity::Paragraph,
            value => TextGranularity::__Unknown(value),
}
    }
}

impl StaticType for TextGranularity {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_text_granularity_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for TextGranularity {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for TextGranularity {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for TextGranularity {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

