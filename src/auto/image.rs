// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use CoordType;
use Point;
use Rect;
use atspi_sys;
use glib;
use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib_wrapper! {
    pub struct Image(Interface<atspi_sys::AtspiImage>);

    match fn {
        get_type => || atspi_sys::atspi_image_get_type(),
    }
}

pub const NONE_IMAGE: Option<&Image> = None;

pub trait ImageExt: 'static {
    fn get_image_description(&self) -> Result<GString, glib::Error>;

    fn get_image_extents(&self, ctype: CoordType) -> Result<Rect, glib::Error>;

    fn get_image_locale(&self) -> Result<GString, glib::Error>;

    fn get_image_position(&self, ctype: CoordType) -> Result<Point, glib::Error>;

    fn get_image_size(&self) -> Result<Point, glib::Error>;
}

impl<O: IsA<Image>> ImageExt for O {
    fn get_image_description(&self) -> Result<GString, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = atspi_sys::atspi_image_get_image_description(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_image_extents(&self, ctype: CoordType) -> Result<Rect, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = atspi_sys::atspi_image_get_image_extents(self.as_ref().to_glib_none().0, ctype.to_glib(), &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_image_locale(&self) -> Result<GString, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = atspi_sys::atspi_image_get_image_locale(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_image_position(&self, ctype: CoordType) -> Result<Point, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = atspi_sys::atspi_image_get_image_position(self.as_ref().to_glib_none().0, ctype.to_glib(), &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_image_size(&self) -> Result<Point, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = atspi_sys::atspi_image_get_image_size(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }
}

impl fmt::Display for Image {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Image")
    }
}
