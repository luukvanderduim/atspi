// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib::wrapper! {
    pub struct Document(Interface<ffi::AtspiDocument>);

    match fn {
        get_type => || ffi::atspi_document_get_type(),
    }
}

pub const NONE_DOCUMENT: Option<&Document> = None;

pub trait DocumentExt: 'static {
    #[doc(alias = "atspi_document_get_current_page_number")]
    fn get_current_page_number(&self) -> Result<i32, glib::Error>;

    #[doc(alias = "atspi_document_get_document_attribute_value")]
    fn get_document_attribute_value(&self, attribute: &str) -> Result<glib::GString, glib::Error>;

    //#[doc(alias = "atspi_document_get_document_attributes")]
    //fn get_document_attributes(&self) -> Result</*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, glib::Error>;

    #[doc(alias = "atspi_document_get_locale")]
    fn get_locale(&self) -> Result<glib::GString, glib::Error>;

    #[doc(alias = "atspi_document_get_page_count")]
    fn get_page_count(&self) -> Result<i32, glib::Error>;
}

impl<O: IsA<Document>> DocumentExt for O {
    fn get_current_page_number(&self) -> Result<i32, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_document_get_current_page_number(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_document_attribute_value(&self, attribute: &str) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_document_get_document_attribute_value(self.as_ref().to_glib_none().0, attribute.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //fn get_document_attributes(&self) -> Result</*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, glib::Error> {
    //    unsafe { TODO: call ffi:atspi_document_get_document_attributes() }
    //}

    fn get_locale(&self) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_document_get_locale(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_page_count(&self) -> Result<i32, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_document_get_page_count(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }
}

impl fmt::Display for Document {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Document")
    }
}
