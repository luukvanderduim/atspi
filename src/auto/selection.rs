// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Accessible;
use crate::Error;
use atspi_sys;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib_wrapper! {
    pub struct Selection(Interface<atspi_sys::AtspiSelection>);

    match fn {
        get_type => || atspi_sys::atspi_selection_get_type(),
    }
}

pub const NONE_SELECTION: Option<&Selection> = None;

pub trait SelectionExt: 'static {
    fn clear_selection(&self) -> Result<(), Error>;

    fn deselect_child(&self, child_index: i32) -> Result<(), Error>;

    fn deselect_selected_child(&self, selected_child_index: i32) -> Result<(), Error>;

    fn get_n_selected_children(&self) -> Result<i32, Error>;

    fn get_selected_child(&self, selected_child_index: i32) -> Result<Accessible, Error>;

    fn is_child_selected(&self, child_index: i32) -> Result<(), Error>;

    fn select_all(&self) -> Result<(), Error>;

    fn select_child(&self, child_index: i32) -> Result<(), Error>;
}

impl<O: IsA<Selection>> SelectionExt for O {
    fn clear_selection(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = atspi_sys::atspi_selection_clear_selection(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn deselect_child(&self, child_index: i32) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = atspi_sys::atspi_selection_deselect_child(self.as_ref().to_glib_none().0, child_index, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn deselect_selected_child(&self, selected_child_index: i32) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = atspi_sys::atspi_selection_deselect_selected_child(self.as_ref().to_glib_none().0, selected_child_index, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_n_selected_children(&self) -> Result<i32, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = atspi_sys::atspi_selection_get_n_selected_children(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_selected_child(&self, selected_child_index: i32) -> Result<Accessible, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = atspi_sys::atspi_selection_get_selected_child(self.as_ref().to_glib_none().0, selected_child_index, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn is_child_selected(&self, child_index: i32) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = atspi_sys::atspi_selection_is_child_selected(self.as_ref().to_glib_none().0, child_index, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn select_all(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = atspi_sys::atspi_selection_select_all(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn select_child(&self, child_index: i32) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = atspi_sys::atspi_selection_select_child(self.as_ref().to_glib_none().0, child_index, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }
}

impl fmt::Display for Selection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Selection")
    }
}
